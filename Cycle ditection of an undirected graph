class Solution {
  public:
    vector<bool> vis;
    vector<vector<int>> graph;
    bool dfs(int node, int parent){
        vis[node] = true;
        for(auto it:graph[node]){
            if(vis[it]==false){
                if(dfs(it,node)) return true;
            }
            else{
                if(vis[it]== true && it != parent){
                    return true; // that means cycle is find so return true
                }
            }
        }
        return false;
        
    }
    bool isCycle(int v, vector<vector<int>>& edges) {
        
        vis.resize(v,false);
        // build the adjacency list for an undirected graph
        graph.resize(v);
        for(int i=0;i<edges.size();i++){
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        for(int i=0;i<v;i++){
           if(vis[i]==false){
               if(dfs(i,-1))
               return true;
           }
        }
        return false;
        // Code here
        
    }
};
