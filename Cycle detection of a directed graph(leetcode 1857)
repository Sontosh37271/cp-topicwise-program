class Solution {
public:
    vector<vector<int>> graph,count;
    vector<int> vis;
    int dfs(int i,string& colors){
            if(vis[i]==0){
                vis[i]=1; // that means visiting 
                for(auto next:graph[i]){
                    if(dfs(next,colors) == -1) return -1;
                    
                    for(int c=0;c<26;c++){  // update the color of present node based on child node
                           count[i][c] = max(count[i][c],count[next][c]); // updation complete
                    }
                }
                ++count[i][colors[i]-'a'];
                vis[i] = 2;// visited 
                return 0;    //count[i][colors[i]-'a']; // kono value to return kora lagbe tai atai return korlam
            }
            else if( vis[i] == 1){
                return -1;  // again I went a visiting node that means cycle is present here
            }
            else{   // vis[i]==2 that means visited node
                return  0;  //count[i][colors[i]-'a'];
            }
        }
    
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        int n = colors.size();

        graph.resize(n);
        vis.resize(n,0); //vis array has 3 state. 0 = not visited,1 = visiting,2 = visited
        count.resize(n,vector<int>(26,0)); // hence there are only 26 character 
        int m = edges.size();
        // building a adjacency list
        for(int i=0;i<m;i++){
            graph[edges[i][0]].push_back(edges[i][1]);  // this is directed graph 
        }

        // I use dfs for finding the result
        int ans = 0;
        for(int i=0;i<n;i++){
            if(vis[i]==0){
                if(dfs(i,colors) == -1)
                    return -1;
                for(int j=0;j<26;j++)
                    ans = max(ans,count[i][j]);  
            }
        }
        return ans;
    }
};
