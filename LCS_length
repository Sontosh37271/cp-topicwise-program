#include<bits/stdc++.h>
using namespace std;
int LCS(string &s,string &t,int m,int n,vector<vector<int>> &dp){
    //base case
    if(m==0 || n==0)
     return 0;
    //memoization
    if(dp[m][n]!=-1) return dp[m][n]; // memoization korlam re for eliminating recurrence
    // match
    if(s[m-1]==t[n-1]){
         return dp[m][n] = 1 + LCS(s,t,m-1,n-1,dp);
    }
    // do not match
    return dp[m][n]=max(LCS(s,t,m-1,n,dp),LCS(s,t,m,n-1,dp));
} 
int main(){
    string s,t;
    cin>>s>>t;
    int m=s.length();
    int n=t.length();
    string res = ""; // LCS 
    vector<vector<int>> dp(m+1,vector<int>(n+1,-1)); // for memoization purpose
    int r = LCS(s,t,m,n,dp);
    cout<<r<<endl;
    // reverse(res.begin(), res.end());
    // cout<<res<<endl;
    
    
}
